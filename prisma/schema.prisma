// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relacionamentos
  borrower Borrower?
  loans    Loan[]   @relation("LoanOfficer")

  @@map("users")
}

model Borrower {
  id          String   @id @default(cuid())
  userId      String   @unique
  bi         String   @unique
  phone       String
  address     String
  city        String
  state       String
  zipCode     String
  birthDate   DateTime
  income      Decimal  @db.Decimal(10, 2)
  creditScore Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relacionamentos
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  loans Loan[]

  @@map("borrowers")
}

model Loan {
  id               String     @id @default(cuid())
  borrowerId       String
  loanOfficerId    String
  amount           Decimal    @db.Decimal(10, 2)
  interestRate     Decimal    @db.Decimal(5, 4)
  termMonths       Int
  monthlyPayment   Decimal    @db.Decimal(10, 2)
  totalAmount      Decimal    @db.Decimal(10, 2)
  status           LoanStatus @default(PENDING)
  approvedAt       DateTime?
  disbursedAt      DateTime?
  dueDate          DateTime
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt

  // Relacionamentos
  borrower    Borrower  @relation(fields: [borrowerId], references: [id])
  loanOfficer User      @relation("LoanOfficer", fields: [loanOfficerId], references: [id])
  payments    Payment[]

  @@map("loans")
}

model Payment {
  id            String        @id @default(cuid())
  loanId        String
  amount        Decimal       @db.Decimal(10, 2)
  principalPaid Decimal       @db.Decimal(10, 2)
  interestPaid  Decimal       @db.Decimal(10, 2)
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime
  paidAt        DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relacionamentos
  loan Loan @relation(fields: [loanId], references: [id], onDelete: Cascade)

  @@map("payments")
}

enum UserRole {
  USER
  ADMIN
  LOAN_OFFICER
}

enum LoanStatus {
  PENDING
  APPROVED
  REJECTED
  DISBURSED
  ACTIVE
  COMPLETED
  DEFAULTED
}

enum PaymentStatus {
  PENDING
  PAID
  OVERDUE
  PARTIAL
}
